/* 1. flex-grow  
특징: 사용자가 페이지를 가로나 세로로 늘렸을때
item 옆에 빈공간이 보일것이다.
item들로 빈공간을 채우는데 사용된다. 
페이지를 늘렸을때 늘어난 크기에서 비율대로 item들이 늘어난다*/


.container {
  height: 200px;
  border: 5px dashed orange;

  display: flex;

}


.item {
  width: 50px;
  height: 50px;
  margin: 5px;
  /*간격 띄우기*/
  background-color: blue;
  border: 5px solid green;
  font-size: 30px;

  /* flex-grow: 1; */
  /* 이럴 경우 모든 item들이 1:1:1:1:1 비율을 갖게됨*/

}

.item:nth-child(2) {
  flex-grow: 2;
}

.item:nth-child(3) {
  flex-grow: 1;
}

/*flex-grow 선택되지 않는 태그들은 크기를 유지한다.*/




/* 2. flex-shrink */
/* 페이지를 줄였을때 줄어든 크기에서 비율대로 item들이 줄어든다 */


.container22 {
  height: 200px;
  border: 5px dashed orange;

  display: flex;

}


.item2 {
  width: 300px;
  height: 50px;
  margin: 5px;
  /*간격 띄우기*/
  background-color: blue;
  border: 5px solid green;
  font-size: 30px;
}

.item2:nth-child(2) {
  flex-shrink: 2;
}

.item2:nth-child(3) {
  flex-shrink: 3;
}


/* 3. flex-basis 
특징: item들의 크기를 정확한 비율로 나타낸다.
따라서, 정확한 비율로 나타내는flex-basis :0;  을 많이 사용한다.*/

.container33 {
  height: 200px;
  border: 5px dashed orange;

  display: flex;
}


.item3 {

  height: 50px;
  margin: 5px;
  /*간격 띄우기*/
  background-color: blue;
  border: 3px solid green;
  font-size: 30px;

  flex-basis: 0;
  /*flex-basis: 0;를 사용하여 밑에 item들이
  정확한 비율로 나온다.*/
}

.item3:nth-child(1) {
  flex-grow: 5;
}

.item3:nth-child(2) {
  flex-grow: 1;
}

.item3:nth-child(3) {
  flex-grow: 3;
}

/* flex 단축 속성 */

/*  flex: grow  shrink  basis 

만약 숫자 하나면 쓰면 그건 grow 값이다.
하지만!! 중요한건 숫자 하나만 작성했을때 
basis의 값은 초기값 auto가 아닌 0이 된다.

따라서 flex:1을 하면 item들의 크기가 똑같이 같은 비율로 나타난다*/